// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: tstock.proto

package tstock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StockDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TradeDate string  `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	Open      float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64 `protobuf:"fixed64,4,opt,name=close,proto3" json:"close,omitempty"`
	PreClose  float64 `protobuf:"fixed64,5,opt,name=preClose,proto3" json:"preClose,omitempty"`
	High      float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Vol       float64 `protobuf:"fixed64,8,opt,name=vol,proto3" json:"vol,omitempty"`
	Amount    float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`
	PctChg    float64 `protobuf:"fixed64,10,opt,name=pctChg,proto3" json:"pctChg,omitempty"`
	Change    float64 `protobuf:"fixed64,11,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *StockDaily) Reset() {
	*x = StockDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockDaily) ProtoMessage() {}

func (x *StockDaily) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockDaily.ProtoReflect.Descriptor instead.
func (*StockDaily) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{0}
}

func (x *StockDaily) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockDaily) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *StockDaily) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockDaily) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockDaily) GetPreClose() float64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *StockDaily) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockDaily) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockDaily) GetVol() float64 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *StockDaily) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StockDaily) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *StockDaily) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

type Candle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period   uint64  `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Pcg      float64 `protobuf:"fixed64,2,opt,name=pcg,proto3" json:"pcg,omitempty"`
	Pcgp     float64 `protobuf:"fixed64,3,opt,name=pcgp,proto3" json:"pcgp,omitempty"`
	Open     float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	Close    float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	High     float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low      float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Amount   float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	PreClose float64 `protobuf:"fixed64,9,opt,name=preClose,proto3" json:"preClose,omitempty"`
	Volume   uint32  `protobuf:"varint,10,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Candle) Reset() {
	*x = Candle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{1}
}

func (x *Candle) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Candle) GetPcg() float64 {
	if x != nil {
		return x.Pcg
	}
	return 0
}

func (x *Candle) GetPcgp() float64 {
	if x != nil {
		return x.Pcgp
	}
	return 0
}

func (x *Candle) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Candle) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Candle) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Candle) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Candle) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Candle) GetPreClose() float64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *Candle) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type Crypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period    uint64  `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Pcg       float64 `protobuf:"fixed64,2,opt,name=pcg,proto3" json:"pcg,omitempty"`
	Pcgp      float64 `protobuf:"fixed64,3,opt,name=pcgp,proto3" json:"pcgp,omitempty"`
	Open      float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	High      float64 `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64 `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`
	Weight    float64 `protobuf:"fixed64,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Vol       float64 `protobuf:"fixed64,9,opt,name=vol,proto3" json:"vol,omitempty"`
	Quotal    float64 `protobuf:"fixed64,10,opt,name=quotal,proto3" json:"quotal,omitempty"`
	EventTime uint64  `protobuf:"varint,11,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
}

func (x *Crypto) Reset() {
	*x = Crypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crypto) ProtoMessage() {}

func (x *Crypto) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crypto.ProtoReflect.Descriptor instead.
func (*Crypto) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{2}
}

func (x *Crypto) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Crypto) GetPcg() float64 {
	if x != nil {
		return x.Pcg
	}
	return 0
}

func (x *Crypto) GetPcgp() float64 {
	if x != nil {
		return x.Pcgp
	}
	return 0
}

func (x *Crypto) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Crypto) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Crypto) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Crypto) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Crypto) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Crypto) GetVol() float64 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *Crypto) GetQuotal() float64 {
	if x != nil {
		return x.Quotal
	}
	return 0
}

func (x *Crypto) GetEventTime() uint64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

type CnBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Area       string `protobuf:"bytes,3,opt,name=area,proto3" json:"area,omitempty"`
	Industry   string `protobuf:"bytes,4,opt,name=industry,proto3" json:"industry,omitempty"`
	FulName    string `protobuf:"bytes,5,opt,name=fulName,proto3" json:"fulName,omitempty"`
	EnName     string `protobuf:"bytes,6,opt,name=enName,proto3" json:"enName,omitempty"`
	CnName     string `protobuf:"bytes,7,opt,name=cnName,proto3" json:"cnName,omitempty"`
	Market     string `protobuf:"bytes,8,opt,name=market,proto3" json:"market,omitempty"`
	ExChange   string `protobuf:"bytes,9,opt,name=exChange,proto3" json:"exChange,omitempty"`
	Status     string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	ListDate   string `protobuf:"bytes,11,opt,name=listDate,proto3" json:"listDate,omitempty"`
	DelistDate string `protobuf:"bytes,12,opt,name=delistDate,proto3" json:"delistDate,omitempty"`
	IsHs       string `protobuf:"bytes,13,opt,name=isHs,proto3" json:"isHs,omitempty"`
}

func (x *CnBasic) Reset() {
	*x = CnBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnBasic) ProtoMessage() {}

func (x *CnBasic) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnBasic.ProtoReflect.Descriptor instead.
func (*CnBasic) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{3}
}

func (x *CnBasic) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CnBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CnBasic) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *CnBasic) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *CnBasic) GetFulName() string {
	if x != nil {
		return x.FulName
	}
	return ""
}

func (x *CnBasic) GetEnName() string {
	if x != nil {
		return x.EnName
	}
	return ""
}

func (x *CnBasic) GetCnName() string {
	if x != nil {
		return x.CnName
	}
	return ""
}

func (x *CnBasic) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CnBasic) GetExChange() string {
	if x != nil {
		return x.ExChange
	}
	return ""
}

func (x *CnBasic) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CnBasic) GetListDate() string {
	if x != nil {
		return x.ListDate
	}
	return ""
}

func (x *CnBasic) GetDelistDate() string {
	if x != nil {
		return x.DelistDate
	}
	return ""
}

func (x *CnBasic) GetIsHs() string {
	if x != nil {
		return x.IsHs
	}
	return ""
}

type StfInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Opt    string `protobuf:"bytes,4,opt,name=opt,proto3" json:"opt,omitempty"`
	Day    uint64 `protobuf:"varint,5,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *StfInfo) Reset() {
	*x = StfInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StfInfo) ProtoMessage() {}

func (x *StfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StfInfo.ProtoReflect.Descriptor instead.
func (*StfInfo) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{4}
}

func (x *StfInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StfInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StfInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StfInfo) GetOpt() string {
	if x != nil {
		return x.Opt
	}
	return ""
}

func (x *StfInfo) GetDay() uint64 {
	if x != nil {
		return x.Day
	}
	return 0
}

type StfRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Opt     string `protobuf:"bytes,4,opt,name=opt,proto3" json:"opt,omitempty"`
	LowDay  string `protobuf:"bytes,5,opt,name=lowDay,proto3" json:"lowDay,omitempty"`
	HighDay string `protobuf:"bytes,6,opt,name=highDay,proto3" json:"highDay,omitempty"`
}

func (x *StfRecord) Reset() {
	*x = StfRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StfRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StfRecord) ProtoMessage() {}

func (x *StfRecord) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StfRecord.ProtoReflect.Descriptor instead.
func (*StfRecord) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{5}
}

func (x *StfRecord) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StfRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StfRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StfRecord) GetOpt() string {
	if x != nil {
		return x.Opt
	}
	return ""
}

func (x *StfRecord) GetLowDay() string {
	if x != nil {
		return x.LowDay
	}
	return ""
}

func (x *StfRecord) GetHighDay() string {
	if x != nil {
		return x.HighDay
	}
	return ""
}

type CnBasicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers     int32      `protobuf:"varint,1,opt,name=numbers,proto3" json:"numbers,omitempty"`
	CnBasicList []*CnBasic `protobuf:"bytes,2,rep,name=cnBasicList,proto3" json:"cnBasicList,omitempty"`
}

func (x *CnBasicList) Reset() {
	*x = CnBasicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CnBasicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CnBasicList) ProtoMessage() {}

func (x *CnBasicList) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CnBasicList.ProtoReflect.Descriptor instead.
func (*CnBasicList) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{6}
}

func (x *CnBasicList) GetNumbers() int32 {
	if x != nil {
		return x.Numbers
	}
	return 0
}

func (x *CnBasicList) GetCnBasicList() []*CnBasic {
	if x != nil {
		return x.CnBasicList
	}
	return nil
}

type StfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers int32      `protobuf:"varint,1,opt,name=numbers,proto3" json:"numbers,omitempty"`
	Stfs    []*StfInfo `protobuf:"bytes,2,rep,name=stfs,proto3" json:"stfs,omitempty"`
}

func (x *StfList) Reset() {
	*x = StfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StfList) ProtoMessage() {}

func (x *StfList) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StfList.ProtoReflect.Descriptor instead.
func (*StfList) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{7}
}

func (x *StfList) GetNumbers() int32 {
	if x != nil {
		return x.Numbers
	}
	return 0
}

func (x *StfList) GetStfs() []*StfInfo {
	if x != nil {
		return x.Stfs
	}
	return nil
}

type StfRecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers int32        `protobuf:"varint,1,opt,name=numbers,proto3" json:"numbers,omitempty"`
	Day     uint64       `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Stfs    []*StfRecord `protobuf:"bytes,3,rep,name=stfs,proto3" json:"stfs,omitempty"`
}

func (x *StfRecordList) Reset() {
	*x = StfRecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StfRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StfRecordList) ProtoMessage() {}

func (x *StfRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StfRecordList.ProtoReflect.Descriptor instead.
func (*StfRecordList) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{8}
}

func (x *StfRecordList) GetNumbers() int32 {
	if x != nil {
		return x.Numbers
	}
	return 0
}

func (x *StfRecordList) GetDay() uint64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *StfRecordList) GetStfs() []*StfRecord {
	if x != nil {
		return x.Stfs
	}
	return nil
}

type TopSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Open  float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	Close float64 `protobuf:"fixed64,3,opt,name=close,proto3" json:"close,omitempty"`
	Vol   float64 `protobuf:"fixed64,4,opt,name=vol,proto3" json:"vol,omitempty"`
}

func (x *TopSymbol) Reset() {
	*x = TopSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopSymbol) ProtoMessage() {}

func (x *TopSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopSymbol.ProtoReflect.Descriptor instead.
func (*TopSymbol) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{9}
}

func (x *TopSymbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopSymbol) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *TopSymbol) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *TopSymbol) GetVol() float64 {
	if x != nil {
		return x.Vol
	}
	return 0
}

type DashBoardV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day         string       `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Top20Vol    []*TopSymbol `protobuf:"bytes,2,rep,name=top20Vol,proto3" json:"top20Vol,omitempty"`
	UpLimit     []string     `protobuf:"bytes,3,rep,name=upLimit,proto3" json:"upLimit,omitempty"`
	DownLimit   []string     `protobuf:"bytes,4,rep,name=downLimit,proto3" json:"downLimit,omitempty"`
	TotalVol    float64      `protobuf:"fixed64,5,opt,name=totalVol,proto3" json:"totalVol,omitempty"`
	TotalAmount float64      `protobuf:"fixed64,6,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	UpStocks    float64      `protobuf:"fixed64,7,opt,name=upStocks,proto3" json:"upStocks,omitempty"`
	DownStocks  float64      `protobuf:"fixed64,8,opt,name=downStocks,proto3" json:"downStocks,omitempty"`
	Stocks      float64      `protobuf:"fixed64,9,opt,name=stocks,proto3" json:"stocks,omitempty"`
}

func (x *DashBoardV1) Reset() {
	*x = DashBoardV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashBoardV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashBoardV1) ProtoMessage() {}

func (x *DashBoardV1) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashBoardV1.ProtoReflect.Descriptor instead.
func (*DashBoardV1) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{10}
}

func (x *DashBoardV1) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *DashBoardV1) GetTop20Vol() []*TopSymbol {
	if x != nil {
		return x.Top20Vol
	}
	return nil
}

func (x *DashBoardV1) GetUpLimit() []string {
	if x != nil {
		return x.UpLimit
	}
	return nil
}

func (x *DashBoardV1) GetDownLimit() []string {
	if x != nil {
		return x.DownLimit
	}
	return nil
}

func (x *DashBoardV1) GetTotalVol() float64 {
	if x != nil {
		return x.TotalVol
	}
	return 0
}

func (x *DashBoardV1) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *DashBoardV1) GetUpStocks() float64 {
	if x != nil {
		return x.UpStocks
	}
	return 0
}

func (x *DashBoardV1) GetDownStocks() float64 {
	if x != nil {
		return x.DownStocks
	}
	return 0
}

func (x *DashBoardV1) GetStocks() float64 {
	if x != nil {
		return x.Stocks
	}
	return 0
}

type DashBoardMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mon       string         `protobuf:"bytes,1,opt,name=mon,proto3" json:"mon,omitempty"`
	DailyDash []*DashBoardV1 `protobuf:"bytes,2,rep,name=dailyDash,proto3" json:"dailyDash,omitempty"`
}

func (x *DashBoardMonth) Reset() {
	*x = DashBoardMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashBoardMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashBoardMonth) ProtoMessage() {}

func (x *DashBoardMonth) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashBoardMonth.ProtoReflect.Descriptor instead.
func (*DashBoardMonth) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{11}
}

func (x *DashBoardMonth) GetMon() string {
	if x != nil {
		return x.Mon
	}
	return ""
}

func (x *DashBoardMonth) GetDailyDash() []*DashBoardV1 {
	if x != nil {
		return x.DailyDash
	}
	return nil
}

type DashBoardYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      string            `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	MonthDash []*DashBoardMonth `protobuf:"bytes,2,rep,name=monthDash,proto3" json:"monthDash,omitempty"`
}

func (x *DashBoardYear) Reset() {
	*x = DashBoardYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashBoardYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashBoardYear) ProtoMessage() {}

func (x *DashBoardYear) ProtoReflect() protoreflect.Message {
	mi := &file_tstock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashBoardYear.ProtoReflect.Descriptor instead.
func (*DashBoardYear) Descriptor() ([]byte, []int) {
	return file_tstock_proto_rawDescGZIP(), []int{12}
}

func (x *DashBoardYear) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *DashBoardYear) GetMonthDash() []*DashBoardMonth {
	if x != nil {
		return x.MonthDash
	}
	return nil
}

var File_tstock_proto protoreflect.FileDescriptor

var file_tstock_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x88, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x63, 0x74, 0x43, 0x68, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x70, 0x63, 0x74, 0x43, 0x68, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xe2, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x70, 0x63, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x67, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x67, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x63, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x63, 0x67, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x67, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xcb, 0x02, 0x0a, 0x07, 0x43, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x48,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x48, 0x73, 0x22, 0x71, 0x0a,
	0x07, 0x53, 0x74, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x22, 0x93, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6f, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x69, 0x67, 0x68, 0x44, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x69, 0x67, 0x68, 0x44, 0x61, 0x79, 0x22, 0x5a, 0x0a, 0x0b, 0x43, 0x6e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x63, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x0b, 0x63, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x48, 0x0a, 0x07, 0x53, 0x74, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x74, 0x66, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x74, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x74, 0x66, 0x73, 0x22, 0x62, 0x0a, 0x0d,
	0x53, 0x74, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x74, 0x66,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x74, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x73, 0x74, 0x66, 0x73,
	0x22, 0x5b, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x22, 0x98, 0x02,
	0x0a, 0x0b, 0x44, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x2d, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x32, 0x30, 0x56, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x6f, 0x70, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x32, 0x30, 0x56, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x77,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x44, 0x61, 0x73, 0x68,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x56, 0x31, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x61, 0x73, 0x68, 0x22,
	0x59, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x73, 0x68, 0x42, 0x0f, 0x5a, 0x0d, 0x66, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x2f, 0x74, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tstock_proto_rawDescOnce sync.Once
	file_tstock_proto_rawDescData = file_tstock_proto_rawDesc
)

func file_tstock_proto_rawDescGZIP() []byte {
	file_tstock_proto_rawDescOnce.Do(func() {
		file_tstock_proto_rawDescData = protoimpl.X.CompressGZIP(file_tstock_proto_rawDescData)
	})
	return file_tstock_proto_rawDescData
}

var file_tstock_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tstock_proto_goTypes = []interface{}{
	(*StockDaily)(nil),     // 0: tstock.StockDaily
	(*Candle)(nil),         // 1: tstock.Candle
	(*Crypto)(nil),         // 2: tstock.Crypto
	(*CnBasic)(nil),        // 3: tstock.CnBasic
	(*StfInfo)(nil),        // 4: tstock.StfInfo
	(*StfRecord)(nil),      // 5: tstock.StfRecord
	(*CnBasicList)(nil),    // 6: tstock.CnBasicList
	(*StfList)(nil),        // 7: tstock.StfList
	(*StfRecordList)(nil),  // 8: tstock.StfRecordList
	(*TopSymbol)(nil),      // 9: tstock.TopSymbol
	(*DashBoardV1)(nil),    // 10: tstock.DashBoardV1
	(*DashBoardMonth)(nil), // 11: tstock.DashBoardMonth
	(*DashBoardYear)(nil),  // 12: tstock.DashBoardYear
}
var file_tstock_proto_depIdxs = []int32{
	3,  // 0: tstock.CnBasicList.cnBasicList:type_name -> tstock.CnBasic
	4,  // 1: tstock.StfList.stfs:type_name -> tstock.StfInfo
	5,  // 2: tstock.StfRecordList.stfs:type_name -> tstock.StfRecord
	9,  // 3: tstock.DashBoardV1.top20Vol:type_name -> tstock.TopSymbol
	10, // 4: tstock.DashBoardMonth.dailyDash:type_name -> tstock.DashBoardV1
	11, // 5: tstock.DashBoardYear.monthDash:type_name -> tstock.DashBoardMonth
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_tstock_proto_init() }
func file_tstock_proto_init() {
	if File_tstock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tstock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Candle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StfInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StfRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CnBasicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StfRecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashBoardV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashBoardMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tstock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashBoardYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tstock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tstock_proto_goTypes,
		DependencyIndexes: file_tstock_proto_depIdxs,
		MessageInfos:      file_tstock_proto_msgTypes,
	}.Build()
	File_tstock_proto = out.File
	file_tstock_proto_rawDesc = nil
	file_tstock_proto_goTypes = nil
	file_tstock_proto_depIdxs = nil
}
